/**
 * Export analysis results to Markdown format
 * @param {Object[]} analysisResults - Results from EEG analysis
 * @param {string} llmExplanation - LLM-generated explanation
 * @param {Object} metadata - Additional metadata about the analysis
 * @returns {string} Markdown formatted report
 */
export function exportToMarkdown(analysisResults, llmExplanation, metadata = {}) {
  const timestamp = new Date().toISOString();
  
  let markdown = `# EEG Insights Report\n\n`;
  markdown += `**Generated:** ${timestamp}\n\n`;
  
  if (metadata.filename) {
    markdown += `**Source File:** ${metadata.filename}\n\n`;
  }
  
  if (metadata.samplingRate) {
    markdown += `**Sampling Rate:** ${metadata.samplingRate} Hz\n\n`;
  }
  
  if (metadata.windowSize) {
    markdown += `**Window Size:** ${metadata.windowSize} samples\n\n`;
  }
  
  markdown += `---\n\n`;
  
  // Add LLM explanation
  if (llmExplanation) {
    markdown += llmExplanation;
    markdown += `\n\n---\n\n`;
  }
  
  // Add raw data table
  markdown += `## Detailed Metrics by Window\n\n`;
  markdown += `| Window | Variance | Delta | Theta | Alpha | Beta | Gamma |\n`;
  markdown += `|--------|----------|-------|-------|-------|------|-------|\n`;
  
  analysisResults.forEach(result => {
    markdown += `| ${result.windowIndex + 1} | ${result.variance.toFixed(4)} | `;
    markdown += `${result.bandpower.delta.toFixed(6)} | `;
    markdown += `${result.bandpower.theta.toFixed(6)} | `;
    markdown += `${result.bandpower.alpha.toFixed(6)} | `;
    markdown += `${result.bandpower.beta.toFixed(6)} | `;
    markdown += `${result.bandpower.gamma.toFixed(6)} |\n`;
  });
  
  markdown += `\n---\n\n`;
  markdown += `*This report was generated by EEG Insights - a React-based EEG analysis tool*\n`;
  
  return markdown;
}

/**
 * Download a markdown report as a file
 * @param {string} content - Markdown content
 * @param {string} filename - Desired filename
 */
export function downloadMarkdownReport(content, filename = 'eeg-report.md') {
  const blob = new Blob([content], { type: 'text/markdown;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Export analysis results to JSON format
 * @param {Object[]} analysisResults - Results from EEG analysis
 * @param {Object} metadata - Additional metadata
 * @returns {string} JSON formatted string
 */
export function exportToJSON(analysisResults, metadata = {}) {
  const exportData = {
    timestamp: new Date().toISOString(),
    metadata,
    results: analysisResults
  };
  
  return JSON.stringify(exportData, null, 2);
}

/**
 * Download JSON data as a file
 * @param {string} content - JSON content
 * @param {string} filename - Desired filename
 */
export function downloadJSONReport(content, filename = 'eeg-data.json') {
  const blob = new Blob([content], { type: 'application/json;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
